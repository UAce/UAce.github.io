<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://uace.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://uace.github.io/" rel="alternate" type="text/html"/><updated>2021-03-07T18:43:16+00:00</updated><id>https://uace.github.io/feed.xml</id><title type="html">UAce</title><subtitle>Yueh's personal website created with Jekyll and hosted on GitHub. It uses HTML5, SASS, Bootstrap 4, JavaScript and JQuery.</subtitle><entry><title type="html">Webhook vs API: How can you use them?</title><link href="https://uace.github.io/2021/02/27/webhooks-vs-api-how-can-you-use-them/" rel="alternate" type="text/html" title="Webhook vs API: How can you use them?"/><published>2021-02-27T03:17:00+00:00</published><updated>2021-02-27T03:17:00+00:00</updated><id>https://uace.github.io/2021/02/27/webhooks-vs-api-how-can-you-use-them</id><content type="html" xml:base="https://uace.github.io/2021/02/27/webhooks-vs-api-how-can-you-use-them/">&lt;p&gt;Recently, I was asked what was the difference between Webhooks and APIs. This was a question I also had a few years ago when I started programming. In this article, I will briefly explain what they are and give an example of how you can use them.&lt;/p&gt; &lt;h3 id=&quot;what-is-an-api&quot;&gt;What is an API?&lt;/h3&gt; &lt;p&gt;API stands for Application Programming Interface. APIs allow applications to talk with each other via a common communication method. There are a lot of different API architectural styles such as REST, SOAP, GraphQL and gRPC. With most APIs, there’s a request followed by a response.&lt;/p&gt; &lt;p&gt;For example, a restaurant might have an application that would make an API request to their server and obtain a list of menu items in the response, then display it for their users. A lot applications out there provide public APIs that you can be use in your personal projects such as &lt;a href=&quot;https://developers.google.com/youtube/v3/getting-started&quot;&gt;YouTube Data API&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/maps/documentation&quot;&gt;Google Map API&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;what-is-a-webhook&quot;&gt;What is a Webhook?&lt;/h3&gt; &lt;p&gt;Unlike APIs, Webhook is simply an HTTP POST request that is triggered automatically when an event occurs. Basically, webhooks are &lt;strong&gt;“user-defined callbacks”&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;For example, an application could provide a webhook that will get triggered by another application when new data is received (callback) instead of sending requests at fixed interval to fetch new data (polling).&lt;/p&gt; &lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt; &lt;h3 id=&quot;using-slack-api-with-slack-bot&quot;&gt;Using Slack API with Slack Bot&lt;/h3&gt; &lt;p&gt;Slack provides a complete list of &lt;a href=&quot;https://api.slack.com/bot-users#api_methods_available_to_bots&quot;&gt;REST API methods&lt;/a&gt; available to bots. We are going to use the &lt;a href=&quot;https://api.slack.com/methods/users.list&quot;&gt;users.list&lt;/a&gt; method to list available users and &lt;a href=&quot;https://api.slack.com/methods/chat.postMessage&quot;&gt;chat.postMessage&lt;/a&gt; method to send a message to a user or channel.&lt;/p&gt; &lt;p&gt;1. Navigate to the Custom Integrations page of your Workspace &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;https://&lt;span class=&quot;nt&quot;&gt;&amp;lt;your-workspace-name&amp;gt;&lt;/span&gt;.slack.com/apps/manage/custom-integrations&lt;/code&gt; and select &lt;strong&gt;&lt;em&gt;Bots&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/custom-integrations-bots.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Slack Custom Integrations Bots&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/custom-integrations-bots.png&quot; alt=&quot;Slack Custom Integrations Bots&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;2. Choose a name and add the bot integration. &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/add-bot.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Add bot&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/add-bot.png&quot; alt=&quot;Add bot&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;3. Save the &lt;strong&gt;API Token&lt;/strong&gt;, we will use it later in Slack API requests for authentication. &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/api-token.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;API token&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/api-token.png&quot; alt=&quot;API token&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;4. Let’s try out the &lt;a href=&quot;https://api.slack.com/methods/users.list&quot;&gt;users.list&lt;/a&gt; method using an API client like Postman and click on &lt;strong&gt;&lt;em&gt;code&lt;/em&gt;&lt;/strong&gt; to generate code: &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/list-users.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;List Users API Request&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/list-users.png&quot; alt=&quot;List Users&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# slack-api.py import requests, json base_url = &quot;https://slack.com/api&quot; payload={} headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': 'Bearer [your Slack Bot API Token]' } # Make GET request and receive response response = requests.request(&quot;GET&quot;, f&quot;{base_url}/users.list&quot;, headers=headers, data=payload) # Convert response to a Dict object response_json = json.loads(response.text) # Find user by username username = 'yueh.liu' user = next((member for member in response_json['members'] if member['name'] == username), None) # Make sure the user exists if not user: raise Exception(f'User [{username}] was not found') # Save the user_id user_id = user['id'] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;5. Now that we have the &lt;strong&gt;User ID&lt;/strong&gt;, we can try sending a message to that user! We can repeat the previous step with the &lt;a href=&quot;https://api.slack.com/methods/chat.postMessage&quot;&gt;chat.postMessage&lt;/a&gt; method. Make sure to change the request method to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;POST&lt;/code&gt;. &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/send-message.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Send message to user&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/send-message.png&quot; alt=&quot;Send message to user&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You should receive a message like this on Slack &lt;br /&gt; &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/ua-bot.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Message from ua-bot&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/ua-bot.png&quot; alt=&quot;ua-bot&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The updated code should look something like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# slack-api.py import requests, json base_url = &quot;https://slack.com/api&quot; payload={} headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': 'Bearer [your Slack Bot API Token]' } # Make GET request and receive response response = requests.request(&quot;GET&quot;, f&quot;{base_url}/users.list&quot;, headers=headers, data=payload) # Convert response to a Dict object response_json = json.loads(response.text) # Find user by username username = 'yueh.liu' user = next((member for member in response_json['members'] if member['name'] == username), None) # Make sure the user exists if not user: raise Exception(f'User [{username}] was not found') # Save the user_id user_id = user['id'] # Set the parameters such as the channel ID (user ID in our case), username for the bot, text message, icon url, etc # You can also send a JSON payload instead of query parameters, but you would need to change the 'Content-Type' to 'application/json' in the headers params = f&quot;channel={user_id}&amp;amp;text=Hello Yueh!&amp;amp;username=ua-bot&amp;amp;icon_url=https://some-url-link.jpg&quot; # Make POST request and receive response response = requests.request(&quot;POST&quot;, f&quot;{base_url}/chat.postMessage?{params}&quot;, headers=headers, data=payload) print(response.text) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;using-slack-incoming-webhooks&quot;&gt;Using Slack Incoming Webhooks&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;Incoming Webhooks are a simple way to post messages from external sources into Slack. They make use of normal HTTP requests with a JSON payload, which includes the message and a few other optional details described later.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;For this example, we are going to create a Web Server and integrate an Incoming Webhook. We will trigger the webhook automatically to send a message to a user on Slack whenever the server receives a message.&lt;/p&gt; &lt;p&gt;1. Navigate to the Custom Integrations page of your Workspace &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;https://&lt;span class=&quot;nt&quot;&gt;&amp;lt;your-workspace-name&amp;gt;&lt;/span&gt;.slack.com/apps/manage/custom-integrations&lt;/code&gt; and select &lt;strong&gt;&lt;em&gt;Incoming WebHooks&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/custom-integrations-webhooks.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Slack Custom Integrations Incoming Webhooks&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/custom-integrations-webhooks.png&quot; alt=&quot;Slack Custom Integrations Incoming Webhooks&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;2. Choose a channel (or user) to post your messages and add the webhook &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/add-webhook.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Add an Incoming Webhook&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/add-webhook.png&quot; alt=&quot;add-webhook&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You should see a message like this on Slack &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/added-integration.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Added Webhook Integration&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/added-integration.png&quot; alt=&quot;added-integration&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;3. Save the Webhook url &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/webhook-url.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Slack Webhook url&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/webhook-url.png&quot; alt=&quot;webhook-url&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;4. Since webhooks work best as callback from a server, let’s write a simple HTTP server that runs on localhost and port 3000. The web server will receive a message on &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;/message&lt;/code&gt; path and read the message content from the payload.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# server.py from http.server import BaseHTTPRequestHandler, HTTPServer import json # Define a custom Request Handler class CustomHandler(BaseHTTPRequestHandler): def set_response(self, code, byte_message): self.send_response(code) self.send_header(&quot;Content-type&quot;, &quot;text/plain&quot;) self.end_headers() self.wfile.write(byte_message) def do_GET(self): if self.path == &quot;/&quot;: self.set_response(200, &quot;I'm alive!!!\n&quot;.encode()) self.wfile.write() else: self.send_error(404) return def do_POST(self): if self.path == &quot;/message&quot;: # Get payload content_length = int(self.headers[&quot;Content-Length&quot;]) encoded_data = self.rfile.read(content_length) data = json.loads(encoded_data.decode(&quot;utf-8&quot;)) if not &quot;message&quot; in data and not data['message']: self.send_error(400, &quot;Bad Request&quot;, '&quot;message&quot; must be in the payload') return self.set_response(200, f&quot;Received message: \&quot;{data['message']}\&quot;\n&quot;.encode()) else: self.send_error(404) return # Initialize an HTTP server port = 3000 address = (&quot;&quot;, port) server = HTTPServer(address, CustomHandler) # Start your server print(f&quot;Starting Web server on localhost:{port}..&quot;) server.serve_forever() &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;5. Check if server is running &lt;br /&gt; &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/server-get.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Check local web server is alive&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/server-get.png&quot; alt=&quot;server-get&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Let’s try sending a message &lt;br /&gt; &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/server-post.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Send message to local web server&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/server-post.png&quot; alt=&quot;server-post&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;6. Now that the server is running, let’s integrate the webhook into the code!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# server.py from http.server import BaseHTTPRequestHandler, HTTPServer import json, requests # Define a custom Request Handler class CustomHandler(BaseHTTPRequestHandler): def set_response(self, code, byte_message): self.send_response(code) self.send_header(&quot;Content-type&quot;, &quot;text/plain&quot;) self.end_headers() self.wfile.write(byte_message) def do_GET(self): if self.path == &quot;/&quot;: self.set_response(200, &quot;I'm alive!!!\n&quot;.encode()) self.wfile.write() else: self.send_error(404) return def do_POST(self): if self.path == &quot;/message&quot;: # Get payload content_length = int(self.headers[&quot;Content-Length&quot;]) encoded_data = self.rfile.read(content_length) data = json.loads(encoded_data.decode(&quot;utf-8&quot;)) if not &quot;message&quot; in data and not data['message']: self.send_error(400, &quot;Bad Request&quot;, '&quot;message&quot; must be in the payload') return self.set_response(200, f&quot;Received message: \&quot;{data['message']}\&quot;\n&quot;.encode()) # Trigger the Webhook (make POST request) and we can ignore the response and failure try: webhook_url = &quot;[Your Slack Webhook Url]&quot; headers = { 'Content-Type': 'application/json' } payload = &quot;{ \&quot;text\&quot;: \&quot;Your server received the following message:\n\n&quot; + data['message'] + &quot;\&quot; }&quot; requests.request(&quot;POST&quot;, webhook_url, headers=headers, data=payload) except Exception: pass else: self.send_error(404) return # Initialize an HTTP server port = 3000 address = (&quot;&quot;, port) server = HTTPServer(address, CustomHandler) # Start your server print(f&quot;Starting Web server on localhost:{port}..&quot;) server.serve_forever() &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;7. Once updated, we can re-send the same message as earlier and you should receive a message like this on Slack: &lt;br /&gt; &lt;a href=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/ua-webhook.png&quot; data-fancybox=&quot;gallery&quot; data-caption=&quot;Message from ua-webhook&quot;&gt;&lt;img src=&quot;/assets/posts/webhooks-vs-api-how-can-you-use-them/ua-webhook.png&quot; alt=&quot;ua-webhook&quot; class=&quot;img-fluid img-thumbnail&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;An API is a communication method used by applications to talk with other applications. Webhook is a POST request that is triggered automatically when an event happens. Basically, APIs are request-based while webhooks are event-based.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://sendgrid.com/blog/webhook-vs-api-whats-difference/&quot;&gt;Webhook vs API&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.altexsoft.com/blog/soap-vs-rest-vs-graphql-vs-rpc/&quot;&gt;Comparing API Architectural Styles: SOAP vs REST vs GraphQL vs RPC&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://api.slack.com/messaging/webhooks&quot;&gt;Slack Incoming Webhooks&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://api.slack.com/bot-users&quot;&gt;Slack User Bots&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/http.server.html&quot;&gt;Python Docs: HTTP servers&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://gist.github.com/mdonkers/63e115cc0c79b4f6b8b3a6b797e485c7&quot;&gt;Simple Python 3 HTTP server for logging all GET and POST requests&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;script src=&quot;//cdn.jsdelivr.net/gh/TRSasasusu/highlightjs-highlight-lines.js@1.1.5/highlightjs-highlight-lines.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; hljs.initHighlightingOnLoad(); hljs.initHighlightLinesOnLoad([ [{start: 8, end: 8, color: 'rgba(255, 255, 255, 0.2)'}], [{start: 28, end: 35, color: 'rgba(255, 255, 255, 0.2)'}], [], [{start: 2, end: 2, color: 'rgba(255, 255, 255, 0.2)'}, {start: 33, end: 40, color: 'rgba(255, 255, 255, 0.2)'}] ]); &lt;/script&gt; &lt;p&gt;🐢&lt;/p&gt;</content><author><name>Yu-Yueh Liu</name></author><category term="Webhook"/><category term="API"/><category term="Slack"/><summary type="html">Recently, I was asked what was the difference between Webhooks and APIs. This was a question I also had a few years ago when I started programming. In this article, I will briefly explain what they are and give an example of how you can use them. What is an API? API stands for Application Programming Interface. APIs allow applications to talk with each other via a common communication method. There are a lot of different API architectural styles such as REST, SOAP, GraphQL and gRPC. With most APIs, there’s a request followed by a response. For example, a restaurant might have an application that would make an API request to their server and obtain a list of menu items in the response, then display it for their users. A lot applications out there provide public APIs that you can be use in your personal projects such as YouTube Data API and Google Map API. What is a Webhook? Unlike APIs, Webhook is simply an HTTP POST request that is triggered automatically when an event occurs. Basically, webhooks are “user-defined callbacks”. For example, an application could provide a webhook that will get triggered by another application when new data is received (callback) instead of sending requests at fixed interval to fetch new data (polling). Example Using Slack API with Slack Bot Slack provides a complete list of REST API methods available to bots. We are going to use the users.list method to list available users and chat.postMessage method to send a message to a user or channel. 1. Navigate to the Custom Integrations page of your Workspace https://&amp;lt;your-workspace-name&amp;gt;.slack.com/apps/manage/custom-integrations and select Bots 2. Choose a name and add the bot integration. 3. Save the API Token, we will use it later in Slack API requests for authentication. 4. Let’s try out the users.list method using an API client like Postman and click on code to generate code: # slack-api.py import requests, json base_url = &quot;https://slack.com/api&quot; payload={} headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': 'Bearer [your Slack Bot API Token]' } # Make GET request and receive response response = requests.request(&quot;GET&quot;, f&quot;{base_url}/users.list&quot;, headers=headers, data=payload) # Convert response to a Dict object response_json = json.loads(response.text) # Find user by username username = 'yueh.liu' user = next((member for member in response_json['members'] if member['name'] == username), None) # Make sure the user exists if not user: raise Exception(f'User [{username}] was not found') # Save the user_id user_id = user['id'] 5. Now that we have the User ID, we can try sending a message to that user! We can repeat the previous step with the chat.postMessage method. Make sure to change the request method to POST. You should receive a message like this on Slack The updated code should look something like this: # slack-api.py import requests, json base_url = &quot;https://slack.com/api&quot; payload={} headers = { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': 'Bearer [your Slack Bot API Token]' } # Make GET request and receive response response = requests.request(&quot;GET&quot;, f&quot;{base_url}/users.list&quot;, headers=headers, data=payload) # Convert response to a Dict object response_json = json.loads(response.text) # Find user by username username = 'yueh.liu' user = next((member for member in response_json['members'] if member['name'] == username), None) # Make sure the user exists if not user: raise Exception(f'User [{username}] was not found') # Save the user_id user_id = user['id'] # Set the parameters such as the channel ID (user ID in our case), username for the bot, text message, icon url, etc # You can also send a JSON payload instead of query parameters, but you would need to change the 'Content-Type' to 'application/json' in the headers params = f&quot;channel={user_id}&amp;amp;text=Hello Yueh!&amp;amp;username=ua-bot&amp;amp;icon_url=https://some-url-link.jpg&quot; # Make POST request and receive response response = requests.request(&quot;POST&quot;, f&quot;{base_url}/chat.postMessage?{params}&quot;, headers=headers, data=payload) print(response.text) Using Slack Incoming Webhooks Incoming Webhooks are a simple way to post messages from external sources into Slack. They make use of normal HTTP requests with a JSON payload, which includes the message and a few other optional details described later. For this example, we are going to create a Web Server and integrate an Incoming Webhook. We will trigger the webhook automatically to send a message to a user on Slack whenever the server receives a message. 1. Navigate to the Custom Integrations page of your Workspace https://&amp;lt;your-workspace-name&amp;gt;.slack.com/apps/manage/custom-integrations and select Incoming WebHooks 2. Choose a channel (or user) to post your messages and add the webhook You should see a message like this on Slack 3. Save the Webhook url 4. Since webhooks work best as callback from a server, let’s write a simple HTTP server that runs on localhost and port 3000. The web server will receive a message on /message path and read the message content from the payload. # server.py from http.server import BaseHTTPRequestHandler, HTTPServer import json # Define a custom Request Handler class CustomHandler(BaseHTTPRequestHandler): def set_response(self, code, byte_message): self.send_response(code) self.send_header(&quot;Content-type&quot;, &quot;text/plain&quot;) self.end_headers() self.wfile.write(byte_message) def do_GET(self): if self.path == &quot;/&quot;: self.set_response(200, &quot;I'm alive!!!\n&quot;.encode()) self.wfile.write() else: self.send_error(404) return def do_POST(self): if self.path == &quot;/message&quot;: # Get payload content_length = int(self.headers[&quot;Content-Length&quot;]) encoded_data = self.rfile.read(content_length) data = json.loads(encoded_data.decode(&quot;utf-8&quot;)) if not &quot;message&quot; in data and not data['message']: self.send_error(400, &quot;Bad Request&quot;, '&quot;message&quot; must be in the payload') return self.set_response(200, f&quot;Received message: \&quot;{data['message']}\&quot;\n&quot;.encode()) else: self.send_error(404) return # Initialize an HTTP server port = 3000 address = (&quot;&quot;, port) server = HTTPServer(address, CustomHandler) # Start your server print(f&quot;Starting Web server on localhost:{port}..&quot;) server.serve_forever() 5. Check if server is running Let’s try sending a message 6. Now that the server is running, let’s integrate the webhook into the code! # server.py from http.server import BaseHTTPRequestHandler, HTTPServer import json, requests # Define a custom Request Handler class CustomHandler(BaseHTTPRequestHandler): def set_response(self, code, byte_message): self.send_response(code) self.send_header(&quot;Content-type&quot;, &quot;text/plain&quot;) self.end_headers() self.wfile.write(byte_message) def do_GET(self): if self.path == &quot;/&quot;: self.set_response(200, &quot;I'm alive!!!\n&quot;.encode()) self.wfile.write() else: self.send_error(404) return def do_POST(self): if self.path == &quot;/message&quot;: # Get payload content_length = int(self.headers[&quot;Content-Length&quot;]) encoded_data = self.rfile.read(content_length) data = json.loads(encoded_data.decode(&quot;utf-8&quot;)) if not &quot;message&quot; in data and not data['message']: self.send_error(400, &quot;Bad Request&quot;, '&quot;message&quot; must be in the payload') return self.set_response(200, f&quot;Received message: \&quot;{data['message']}\&quot;\n&quot;.encode()) # Trigger the Webhook (make POST request) and we can ignore the response and failure try: webhook_url = &quot;[Your Slack Webhook Url]&quot; headers = { 'Content-Type': 'application/json' } payload = &quot;{ \&quot;text\&quot;: \&quot;Your server received the following message:\n\n&quot; + data['message'] + &quot;\&quot; }&quot; requests.request(&quot;POST&quot;, webhook_url, headers=headers, data=payload) except Exception: pass else: self.send_error(404) return # Initialize an HTTP server port = 3000 address = (&quot;&quot;, port) server = HTTPServer(address, CustomHandler) # Start your server print(f&quot;Starting Web server on localhost:{port}..&quot;) server.serve_forever() 7. Once updated, we can re-send the same message as earlier and you should receive a message like this on Slack: Conclusion An API is a communication method used by applications to talk with other applications. Webhook is a POST request that is triggered automatically when an event happens. Basically, APIs are request-based while webhooks are event-based. References Webhook vs API Comparing API Architectural Styles: SOAP vs REST vs GraphQL vs RPC Slack Incoming Webhooks Slack User Bots Python Docs: HTTP servers Simple Python 3 HTTP server for logging all GET and POST requests 🐢</summary></entry><entry><title type="html">Dockerfile: Difference between ENTRYPOINT and CMD</title><link href="https://uace.github.io/2021/02/25/dockerfile-difference-between-entrypoint-and-cmd/" rel="alternate" type="text/html" title="Dockerfile: Difference between ENTRYPOINT and CMD"/><published>2021-02-25T04:05:00+00:00</published><updated>2021-02-25T04:05:00+00:00</updated><id>https://uace.github.io/2021/02/25/dockerfile-difference-between-entrypoint-and-cmd</id><content type="html" xml:base="https://uace.github.io/2021/02/25/dockerfile-difference-between-entrypoint-and-cmd/">&lt;p&gt;I have been working with Docker for over a year now but there are still a lot of things that I do not understand, and things that I thought I knew but were wrong such as the difference between ENTRYPOINT and CMD instructions in Dockerfiles.&lt;/p&gt; &lt;p&gt;I always thought the only difference was that CMD can be overriden and that they were mutually exclusive since Docker containers needed a starting process. In fact, they are not mutually exclusive and understanding the difference between them could be very useful when building Dockerfiles!&lt;/p&gt; &lt;h3 id=&quot;docker-entrypoint&quot;&gt;Docker ENTRYPOINT&lt;/h3&gt; &lt;p&gt;An ENTRYPOINT is used to configure a container to run as an executable and it has two forms:&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;exec&lt;/em&gt;&lt;/strong&gt; form (preferred):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt; will be appended after all elements of the array. For example, if you need to provide a third parameter to the above ENTRYPOINT, you can run &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt; param3&lt;/code&gt;. Moreover, it is possible to override the ENTRYPOINT using &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run --entrypoint&lt;/code&gt;. The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘) and backslashes need to be escaped.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;shell&lt;/em&gt;&lt;/strong&gt; form:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;ENTRYPOINT command param1 param2 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This form prevents any command line arguments to be provided to the ENTRYPOINT and will start the executable as a subcommand of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;/bin/sh -c&lt;/code&gt;. The executable will not be the container’s &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;PID 1&lt;/code&gt; which does not pass Unix signals.&lt;/p&gt; &lt;h3 id=&quot;docker-cmd&quot;&gt;Docker CMD&lt;/h3&gt; &lt;p&gt;A CMD is used to provide defaults for an executing container. The defaults can be an executable, command and/or parameters. Unlike ENTRYPOINT, CMD has 3 forms:&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;exec&lt;/em&gt;&lt;/strong&gt; form (preferred):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Although it looks similar to the ENTRYPOINT exec form, command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt; will override the default CMD defined in the Dockerfile.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;default arguments&lt;/em&gt;&lt;/strong&gt; form (used with ENTRYPOINT):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt; CMD [&quot;param1&quot;, &quot;param2&quot;] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This form is used when both ENTRYPOINT and CMD instructions are specified. ENTRYPOINT will define the executable and parameters to run, whereas CMD will define additional default parameters, overridable by command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;shell&lt;/em&gt;&lt;/strong&gt; form:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt; CMD command param1 param2 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar to the exec form, command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt; will override the default CMD defined in the Dockerfile. However, the shell form will invoke a command shell and allow normal shell processing such as variable substitution.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Both ENTRYPOINT and CMD instructions allow containers to run as executable but they are not mutually exclusive. If you need to override the default executable, then you might want to use CMD. If you would like your container to run the same executable every time, then you should consider using ENTRYPOINT with CMD.&lt;/p&gt; &lt;p&gt;The table below describes the behaviour of ENTRYPOINT with CMD:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align: center&quot;&gt;dockerfile ENTRYPOINT&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;dockerfile CMD&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;docker run --entrypoint&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;docker run command&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Actual command run&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-1]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[foo bar]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;not set&amp;gt;&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;not set&amp;gt;&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-1 foo bar]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-1]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[foo bar]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-2]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;not set&amp;gt;&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-2]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-1]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[foo bar]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;not set&amp;gt;&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[zoo boo]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-1 zoo boo]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-1]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[foo bar]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-2]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[zoo boo]&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;[exec-2 zoo boo]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#entrypoint&quot;&gt;ENTRYPOINT Dockerfile reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#cmd&quot;&gt;CMD Dockerfile reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://phoenixnap.com/kb/docker-cmd-vs-entrypoint&quot;&gt;Docker Entrypoint vs CMD: Solving the Dilemma&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes&quot;&gt;Kubernetes Command and Arguments for a Container&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;🐢&lt;/p&gt;</content><author><name>Yu-Yueh Liu</name></author><category term="Docker"/><category term="Dockerfile"/><summary type="html">I have been working with Docker for over a year now but there are still a lot of things that I do not understand, and things that I thought I knew but were wrong such as the difference between ENTRYPOINT and CMD instructions in Dockerfiles. I always thought the only difference was that CMD can be overriden and that they were mutually exclusive since Docker containers needed a starting process. In fact, they are not mutually exclusive and understanding the difference between them could be very useful when building Dockerfiles! Docker ENTRYPOINT An ENTRYPOINT is used to configure a container to run as an executable and it has two forms: The exec form (preferred): ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] Command line arguments provided to docker run &amp;lt;image&amp;gt; will be appended after all elements of the array. For example, if you need to provide a third parameter to the above ENTRYPOINT, you can run docker run &amp;lt;image&amp;gt; param3. Moreover, it is possible to override the ENTRYPOINT using docker run --entrypoint. The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘) and backslashes need to be escaped. The shell form: ENTRYPOINT command param1 param2 This form prevents any command line arguments to be provided to the ENTRYPOINT and will start the executable as a subcommand of /bin/sh -c. The executable will not be the container’s PID 1 which does not pass Unix signals. Docker CMD A CMD is used to provide defaults for an executing container. The defaults can be an executable, command and/or parameters. Unlike ENTRYPOINT, CMD has 3 forms: The exec form (preferred): CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] Although it looks similar to the ENTRYPOINT exec form, command line arguments provided to docker run &amp;lt;image&amp;gt; will override the default CMD defined in the Dockerfile. The default arguments form (used with ENTRYPOINT): CMD [&quot;param1&quot;, &quot;param2&quot;] This form is used when both ENTRYPOINT and CMD instructions are specified. ENTRYPOINT will define the executable and parameters to run, whereas CMD will define additional default parameters, overridable by command line arguments provided to docker run &amp;lt;image&amp;gt;. The shell form: CMD command param1 param2 Similar to the exec form, command line arguments provided to docker run &amp;lt;image&amp;gt; will override the default CMD defined in the Dockerfile. However, the shell form will invoke a command shell and allow normal shell processing such as variable substitution. Conclusion Both ENTRYPOINT and CMD instructions allow containers to run as executable but they are not mutually exclusive. If you need to override the default executable, then you might want to use CMD. If you would like your container to run the same executable every time, then you should consider using ENTRYPOINT with CMD. The table below describes the behaviour of ENTRYPOINT with CMD: dockerfile ENTRYPOINT dockerfile CMD docker run --entrypoint docker run command Actual command run [exec-1] [foo bar] &amp;lt;not set&amp;gt; &amp;lt;not set&amp;gt; [exec-1 foo bar] [exec-1] [foo bar] [exec-2] &amp;lt;not set&amp;gt; [exec-2] [exec-1] [foo bar] &amp;lt;not set&amp;gt; [zoo boo] [exec-1 zoo boo] [exec-1] [foo bar] [exec-2] [zoo boo] [exec-2 zoo boo] References ENTRYPOINT Dockerfile reference CMD Dockerfile reference Docker Entrypoint vs CMD: Solving the Dilemma Kubernetes Command and Arguments for a Container 🐢</summary></entry><entry><title type="html">My First Chrome Extension</title><link href="https://uace.github.io/2020/09/03/my-first-chrome-extension/" rel="alternate" type="text/html" title="My First Chrome Extension"/><published>2020-09-03T07:27:00+00:00</published><updated>2020-09-03T07:27:00+00:00</updated><id>https://uace.github.io/2020/09/03/my-first-chrome-extension</id><content type="html" xml:base="https://uace.github.io/2020/09/03/my-first-chrome-extension/">&lt;p&gt;Chrome extensions are programs that add functionalities to Chrome and enhance your browsing experience. In fact, you can find a myriad of extensions for the purpose of improving your productivity, protecting your privacy, and more. Making your own Chrome extension is quite simple and it could turn out to be a fun personal project.&lt;/p&gt; &lt;h3 id=&quot;goal&quot;&gt;Goal&lt;/h3&gt; &lt;p&gt;This article is a documentation of what I learned when making my first Chrome extension YouTubeStopwatch. If you’re looking for a tutorial for starters, check out the official &lt;strong&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/getstarted&quot;&gt;Getting Started Tutorial&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;h3 id=&quot;what-is-youtubestopwatch&quot;&gt;What is YouTubeStopwatch?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/youtubestopwatch/ibaejmohdpnppkglomilmholhndaobag&quot;&gt;YouTubeStopwatch&lt;/a&gt;&lt;/strong&gt; was created for a course on Human-Computer Interaction (HCI). The objective was to help users manage the amount of time they would like to spend on YouTube, and somehow incite them to quit YouTube without resorting to blocking the site.&lt;/p&gt; &lt;p&gt;The idea was to prompt the user for the desired time they want to spend on YouTube and start a countdown. Once the time is up, the user is asked whether they want to stay on YouTube or leave. If they choose to keep watching videos, they will be subject to some gradual graphical deterioration and slowly worsening their viewing experience.&lt;/p&gt; &lt;p&gt;So how did I get started? Well, the first thing I had to learn was how Chrome Extensions are structured.&lt;/p&gt; &lt;!-- TODO: add ToC --&gt; &lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt; &lt;pre&gt;&lt;code class=&quot; language-Markdown nohljsln &quot;&gt;src ├── manifest.json ├── popup.html ├── js │ ├── background.js │ ├── content.js │ ├── jquery-3.4.1.min.js.js │ ├── constants.js │ └── … ├── img │ └── extension-icon.png └── css └── popup.css&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;manifest&quot;&gt;Manifest&lt;/h2&gt; &lt;p&gt;The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file is the first thing you need when creating an extension. It provides all the information about your extension to Google Chrome such as the name of your extension, the permissions needed, etc but we’ll get into that a bit later. Here is a minimal example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot; } &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;background-scripts&quot;&gt;Background Scripts&lt;/h2&gt; &lt;p&gt;Background scripts are scripts that run in the background of your browser when you open Google Chrome. You can make the scripts persistent or not depending on your use case. I chose to use a persistent script. As long as Google Chrome is open, the script will be running. To define background scripts, I added a &lt;strong&gt;background&lt;/strong&gt; section to the &lt;strong&gt;manifest&lt;/strong&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; ], &quot;persistent&quot;: true } } &lt;/code&gt;&lt;/pre&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: It is now recommended to use non-persistent background scripts with &lt;a href=&quot;https://developer.chrome.com/extensions/background_migration&quot;&gt;Event Driven Background Scripts&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Below is an example of what my background script looked like.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// List to track all active YouTube tabs&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Create Main Event Listener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If sender is youtube, add listener&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;youtube&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Handles event message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;START_COUNTDOWN&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startCountdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Subscribes tab to active youtube tabs and adds listener to url changes&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// When a youtube tab is closed, remove tabId from active_youtube_tabs list&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onRemoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeYoutubeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// When the tab url changes, remove tabId from active_youtube_tabs if user is no longer on Youtube&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;youtube.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeYoutubeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Removes specific tab from active_youtube_tabs list&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeYoutubeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;When the script starts, a callback function is added with &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;onMessage.addListener()&lt;/code&gt; to handle events. Depending on the event received, a different action will be triggered. For example, the &lt;strong&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;START_COUNTDOWN&lt;/code&gt;&lt;/strong&gt; event will start the countdown in the background script. The tabId is stored in a list to keep track of active youtube tabs if the sender is youtube. This is done using the Chrome Tabs API and we need to give permissions to our application in the manifest file.&lt;/p&gt; &lt;p&gt;I needed to use JQuery in the background script so I downloaded the &lt;em&gt;jquery-3.4.1.min.js&lt;/em&gt; file, saved it in the &lt;strong&gt;js&lt;/strong&gt; directory and specified the file as a background script. Here are the new changes to the manifest file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true } } &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;content-scripts&quot;&gt;Content Scripts&lt;/h2&gt; &lt;p&gt;Content Scripts are run on specific web pages and can interact with a website’s DOM. To define a content script, I added a &lt;strong&gt;content_scripts&lt;/strong&gt; section to the &lt;strong&gt;manifest&lt;/strong&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true }, &quot;content_scripts&quot;: [ { &quot;matches&quot;: [ &quot;*://*.youtube.com/*&quot; ], &quot;js&quot;: [ &quot;js/jquery-3.4.1.min.js&quot;, &quot;js/content.js&quot; ], &quot;run_at&quot;: &quot;document_end&quot; } ] } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;&quot;matches&quot;: [ &quot;*://*.youtube.com/*&quot; ]&lt;/code&gt; section tells Chrome to run the content scripts when the URL of the website matches the values specified. The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;&quot;run_at&quot;: &quot;document_end&quot;&lt;/code&gt; section ensures that the content scripts are run after the page is loaded.&lt;/p&gt; &lt;!-- ## Popup ## Web Resources ## Constants --&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Chrome Extensions have changed since I first created this project but it was still a valuable experience.&lt;/p&gt; &lt;script src=&quot;//cdn.jsdelivr.net/gh/TRSasasusu/highlightjs-highlight-lines.js@1.1.5/highlightjs-highlight-lines.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; hljs.initHighlightingOnLoad(); hljs.initHighlightLinesOnLoad([[], [], [{start: 5, end: 10, color: 'rgba(255, 255, 255, 0.2)'}], [], [{start: 5, end: 7, color: 'rgba(255, 255, 255, 0.2)'}, {start: 11, end: 11, color: 'rgba(255, 255, 255, 0.2)'}], [{start: 15, end: 26, color: 'rgba(255, 255, 255, 0.2)'}] ]); &lt;/script&gt; &lt;p&gt;🐢&lt;/p&gt;</content><author><name>Yu-Yueh Liu</name></author><category term="JavaScript"/><category term="HTML5"/><category term="CSS3"/><category term="Chrome Extension"/><summary type="html">Chrome extensions are programs that add functionalities to Chrome and enhance your browsing experience. In fact, you can find a myriad of extensions for the purpose of improving your productivity, protecting your privacy, and more. Making your own Chrome extension is quite simple and it could turn out to be a fun personal project. Goal This article is a documentation of what I learned when making my first Chrome extension YouTubeStopwatch. If you’re looking for a tutorial for starters, check out the official Getting Started Tutorial. What is YouTubeStopwatch? YouTubeStopwatch was created for a course on Human-Computer Interaction (HCI). The objective was to help users manage the amount of time they would like to spend on YouTube, and somehow incite them to quit YouTube without resorting to blocking the site. The idea was to prompt the user for the desired time they want to spend on YouTube and start a countdown. Once the time is up, the user is asked whether they want to stay on YouTube or leave. If they choose to keep watching videos, they will be subject to some gradual graphical deterioration and slowly worsening their viewing experience. So how did I get started? Well, the first thing I had to learn was how Chrome Extensions are structured. Project Structure src ├── manifest.json ├── popup.html ├── js │ ├── background.js │ ├── content.js │ ├── jquery-3.4.1.min.js.js │ ├── constants.js │ └── … ├── img │ └── extension-icon.png └── css └── popup.css Manifest The manifest.json file is the first thing you need when creating an extension. It provides all the information about your extension to Google Chrome such as the name of your extension, the permissions needed, etc but we’ll get into that a bit later. Here is a minimal example: { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot; } Background Scripts Background scripts are scripts that run in the background of your browser when you open Google Chrome. You can make the scripts persistent or not depending on your use case. I chose to use a persistent script. As long as Google Chrome is open, the script will be running. To define background scripts, I added a background section to the manifest file. { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; ], &quot;persistent&quot;: true } } Note: It is now recommended to use non-persistent background scripts with Event Driven Background Scripts. Below is an example of what my background script looked like. // List to track all active YouTube tabs var active_youtube_tabs = []; // Create Main Event Listener function initBackground() { chrome.runtime.onMessage.addListener(function (msg, sender) { var tabId = sender.tab ? sender.tab.id : null; // If sender is youtube, add listener if (msg.from === 'youtube' &amp;amp;&amp;amp; typeof (msg.event) === 'undefined') { active_youtube_tabs.indexOf(tabId) &amp;lt; 0 ? addListeners(tabId) : null; } // Handles event message switch (msg.event) { case &quot;START_COUNTDOWN&quot;: startCountdown(); break; ... default: break; } }); } initBackground(); // Subscribes tab to active youtube tabs and adds listener to url changes function addListeners(tabId) { active_youtube_tabs.push(tabId); // When a youtube tab is closed, remove tabId from active_youtube_tabs list chrome.tabs.onRemoved.addListener(function (id) { if (tabId === id) { removeYoutubeTab(tabId); } }); // When the tab url changes, remove tabId from active_youtube_tabs if user is no longer on Youtube chrome.tabs.onUpdated.addListener(function (id, changeInfo) { if (tabId === id &amp;amp;&amp;amp; changeInfo.status === 'complete') { chrome.tabs.get(tabId, function (tab) { if (tab.url.indexOf('youtube.com') &amp;lt; 0) { removeYoutubeTab(tabId); } }); } }); } // Removes specific tab from active_youtube_tabs list function removeYoutubeTab(tabId) { var idx = active_youtube_tabs.indexOf(tabId); active_youtube_tabs.splice(idx, 1); } When the script starts, a callback function is added with onMessage.addListener() to handle events. Depending on the event received, a different action will be triggered. For example, the START_COUNTDOWN event will start the countdown in the background script. The tabId is stored in a list to keep track of active youtube tabs if the sender is youtube. This is done using the Chrome Tabs API and we need to give permissions to our application in the manifest file. I needed to use JQuery in the background script so I downloaded the jquery-3.4.1.min.js file, saved it in the js directory and specified the file as a background script. Here are the new changes to the manifest file: { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true } } Content Scripts Content Scripts are run on specific web pages and can interact with a website’s DOM. To define a content script, I added a content_scripts section to the manifest file. { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true }, &quot;content_scripts&quot;: [ { &quot;matches&quot;: [ &quot;*://*.youtube.com/*&quot; ], &quot;js&quot;: [ &quot;js/jquery-3.4.1.min.js&quot;, &quot;js/content.js&quot; ], &quot;run_at&quot;: &quot;document_end&quot; } ] } The &quot;matches&quot;: [ &quot;*://*.youtube.com/*&quot; ] section tells Chrome to run the content scripts when the URL of the website matches the values specified. The &quot;run_at&quot;: &quot;document_end&quot; section ensures that the content scripts are run after the page is loaded. Conclusion Chrome Extensions have changed since I first created this project but it was still a valuable experience. 🐢</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://uace.github.io/jekyll/update/2020/07/13/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!"/><published>2020-07-13T04:09:33+00:00</published><updated>2020-07-13T04:09:33+00:00</updated><id>https://uace.github.io/jekyll/update/2020/07/13/welcome-to-jekyll</id><content type="html" xml:base="https://uace.github.io/jekyll/update/2020/07/13/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt; &lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt; &lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;🐢&lt;/p&gt;</content><author><name></name></author><category term="jekyll"/><category term="update"/><category term="Jekyll"/><category term="HowTo"/><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk. 🐢</summary></entry></feed>