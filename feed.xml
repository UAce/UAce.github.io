<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://uace.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://uace.github.io/" rel="alternate" type="text/html"/><updated>2021-02-27T07:26:27+00:00</updated><id>https://uace.github.io/feed.xml</id><title type="html">UAce</title><subtitle>Yueh's personal website created with Jekyll and hosted on GitHub. It uses HTML5, SASS, Bootstrap 4, JavaScript and JQuery.</subtitle><entry><title type="html">Dockerfile: Difference between ENTRYPOINT and CMD</title><link href="https://uace.github.io/2021/02/25/dockerfile-difference-between-entrypoint-and-cmd/" rel="alternate" type="text/html" title="Dockerfile: Difference between ENTRYPOINT and CMD"/><published>2021-02-25T04:05:00+00:00</published><updated>2021-02-25T04:05:00+00:00</updated><id>https://uace.github.io/2021/02/25/dockerfile-difference-between-entrypoint-and-cmd</id><content type="html" xml:base="https://uace.github.io/2021/02/25/dockerfile-difference-between-entrypoint-and-cmd/">&lt;p&gt;I have been working with Docker for over a year now but there are still a lot of things that I do not understand, and things that I thought I knew but were wrong such as the difference between ENTRYPOINT and CMD instructions in Dockerfiles.&lt;/p&gt; &lt;p&gt;I always thought the only difference was that CMD can be overriden and that they were mutually exclusive since Docker containers needed a starting process. In fact, they are not mutually exclusive and understanding the difference between them could be very useful when building Dockerfiles!&lt;/p&gt; &lt;h3 id=&quot;docker-entrypoint&quot;&gt;Docker ENTRYPOINT&lt;/h3&gt; &lt;p&gt;An ENTRYPOINT is used to configure a container to run as an executable and it has two forms:&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;exec&lt;/em&gt;&lt;/strong&gt; form (preferred):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-Bash nohljsln &quot;&gt;ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt; will be appended after all elements of the array. For example, if you need to provide a third parameter to the above ENTRYPOINT, you can run &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt; param3&lt;/code&gt;. Moreover, it is possible to override the ENTRYPOINT using &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run --entrypoint&lt;/code&gt;. The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘) and backslashes need to be escaped.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;shell&lt;/em&gt;&lt;/strong&gt; form:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-Bash nohljsln &quot;&gt;ENTRYPOINT command param1 param2&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This form prevents any command line arguments to be provided to the ENTRYPOINT and will start the executable as a subcommand of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;/bin/sh -c&lt;/code&gt;. The executable will not be the container’s &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;PID 1&lt;/code&gt; which does not pass Unix signals.&lt;/p&gt; &lt;h3 id=&quot;docker-cmd&quot;&gt;Docker CMD&lt;/h3&gt; &lt;p&gt;A CMD is used to provide defaults for an executing container. The defaults can be an executable, command and/or parameters. Unlike ENTRYPOINT, CMD has 3 forms:&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;exec&lt;/em&gt;&lt;/strong&gt; form (preferred):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-Bash nohljsln &quot;&gt;CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Although it looks similar to the ENTRYPOINT exec form, command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt; will override the default CMD defined in the Dockerfile.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;default arguments&lt;/em&gt;&lt;/strong&gt; form (used with ENTRYPOINT):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-Bash nohljsln &quot;&gt;CMD [&quot;param1&quot;, &quot;param2&quot;]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This form is used when both ENTRYPOINT and CMD instructions are specified. ENTRYPOINT will define the executable and parameters to run, whereas CMD will define additional default parameters, overridable by command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;&lt;em&gt;shell&lt;/em&gt;&lt;/strong&gt; form:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-Bash nohljsln &quot;&gt;CMD command param1 param2&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar to the exec form, command line arguments provided to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt;&lt;/code&gt; will override the default CMD defined in the Dockerfile. However, the shell form will invoke a command shell and allow normal shell processing such as variable substitution.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;Both ENTRYPOINT and CMD instructions allow containers to run as executable but they are not mutually exclusive. If you need to override the default executable, then you might want to use CMD. If you would like your container to run the same executable every time, then you should consider using ENTRYPOINT with CMD.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#entrypoint&quot;&gt;ENTRYPOINT Dockerfile reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#cmd&quot;&gt;CMD Dockerfile reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://phoenixnap.com/kb/docker-cmd-vs-entrypoint&quot;&gt;Docker Entrypoint vs CMD: Solving the Dilemma&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>Yu-Yueh Liu</name></author><category term="Docker"/><category term="Dockerfile"/><summary type="html">I have been working with Docker for over a year now but there are still a lot of things that I do not understand, and things that I thought I knew but were wrong such as the difference between ENTRYPOINT and CMD instructions in Dockerfiles. I always thought the only difference was that CMD can be overriden and that they were mutually exclusive since Docker containers needed a starting process. In fact, they are not mutually exclusive and understanding the difference between them could be very useful when building Dockerfiles! Docker ENTRYPOINT An ENTRYPOINT is used to configure a container to run as an executable and it has two forms: The exec form (preferred): ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] Command line arguments provided to docker run &amp;lt;image&amp;gt; will be appended after all elements of the array. For example, if you need to provide a third parameter to the above ENTRYPOINT, you can run docker run &amp;lt;image&amp;gt; param3. Moreover, it is possible to override the ENTRYPOINT using docker run --entrypoint. The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘) and backslashes need to be escaped. The shell form: ENTRYPOINT command param1 param2 This form prevents any command line arguments to be provided to the ENTRYPOINT and will start the executable as a subcommand of /bin/sh -c. The executable will not be the container’s PID 1 which does not pass Unix signals. Docker CMD A CMD is used to provide defaults for an executing container. The defaults can be an executable, command and/or parameters. Unlike ENTRYPOINT, CMD has 3 forms: The exec form (preferred): CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] Although it looks similar to the ENTRYPOINT exec form, command line arguments provided to docker run &amp;lt;image&amp;gt; will override the default CMD defined in the Dockerfile. The default arguments form (used with ENTRYPOINT): CMD [&quot;param1&quot;, &quot;param2&quot;] This form is used when both ENTRYPOINT and CMD instructions are specified. ENTRYPOINT will define the executable and parameters to run, whereas CMD will define additional default parameters, overridable by command line arguments provided to docker run &amp;lt;image&amp;gt;. The shell form: CMD command param1 param2 Similar to the exec form, command line arguments provided to docker run &amp;lt;image&amp;gt; will override the default CMD defined in the Dockerfile. However, the shell form will invoke a command shell and allow normal shell processing such as variable substitution. Conclusion Both ENTRYPOINT and CMD instructions allow containers to run as executable but they are not mutually exclusive. If you need to override the default executable, then you might want to use CMD. If you would like your container to run the same executable every time, then you should consider using ENTRYPOINT with CMD. References ENTRYPOINT Dockerfile reference CMD Dockerfile reference Docker Entrypoint vs CMD: Solving the Dilemma</summary></entry><entry><title type="html">My First Chrome Extension</title><link href="https://uace.github.io/2020/09/03/my-first-chrome-extension/" rel="alternate" type="text/html" title="My First Chrome Extension"/><published>2020-09-03T07:27:00+00:00</published><updated>2020-09-03T07:27:00+00:00</updated><id>https://uace.github.io/2020/09/03/my-first-chrome-extension</id><content type="html" xml:base="https://uace.github.io/2020/09/03/my-first-chrome-extension/">&lt;p&gt;Chrome extensions are programs that add functionalities to Chrome and enhance your browsing experience. In fact, you can find a myriad of extensions for the purpose of improving your productivity, protecting your privacy, and more. Making your own Chrome extension is quite simple and it could turn out to be a fun personal project.&lt;/p&gt; &lt;h3 id=&quot;goal&quot;&gt;Goal&lt;/h3&gt; &lt;p&gt;This article is a documentation of what I learned when making my first Chrome extension YouTubeStopwatch. If you’re looking for a tutorial for starters, check out the official &lt;strong&gt;[Getting Started Tutorial][getting-started]&lt;/strong&gt;. [getting-started]: https://developer.chrome.com/extensions/getstarted&lt;/p&gt; &lt;h3 id=&quot;what-is-youtubestopwatch&quot;&gt;What is YouTubeStopwatch?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;[YouTubeStopwatch][youtubestopwatch]&lt;/strong&gt; was created for a course on Human-Computer Interaction (HCI). The objective was to help users manage the amount of time they would like to spend on YouTube, and somehow incite them to quit YouTube without resorting to blocking the site. [youtubestopwatch]: https://chrome.google.com/webstore/detail/youtubestopwatch/ibaejmohdpnppkglomilmholhndaobag&lt;/p&gt; &lt;p&gt;The idea was to prompt the user for the desired time they want to spend on YouTube and start a countdown. Once the time is up, the user is asked whether they want to stay on YouTube or leave. If they choose to keep watching videos, they will be subject to some gradual graphical deterioration and slowly worsening their viewing experience.&lt;/p&gt; &lt;p&gt;So how did I get started? Well, the first thing I had to learn was how Chrome Extensions are structured.&lt;/p&gt; &lt;!-- TODO: add ToC --&gt; &lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt; &lt;pre&gt;&lt;code class=&quot; language-Markdown nohljsln &quot;&gt;src ├── manifest.json ├── popup.html ├── js │ ├── background.js │ ├── content.js │ ├── jquery-3.4.1.min.js.js │ ├── constants.js │ └── … ├── img │ └── extension-icon.png └── css └── popup.css&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;manifest&quot;&gt;Manifest&lt;/h2&gt; &lt;p&gt;The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file is the first thing you need when creating an extension. It provides all the information about your extension to Google Chrome such as the name of your extension, the permissions needed, etc but we’ll get into that a bit later. Here is a minimal example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-JSON &quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot; }&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;background-scripts&quot;&gt;Background Scripts&lt;/h2&gt; &lt;p&gt;Background scripts are scripts that run in the background of your browser when you open Google Chrome. You can make the scripts persistent or not depending on your use case. I chose to use a persistent script. As long as Google Chrome is open, the script will be running. To define background scripts, I added a &lt;strong&gt;background&lt;/strong&gt; section to the &lt;strong&gt;manifest&lt;/strong&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-JSON &quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &lt;span class=&quot;hl-line&quot;&gt; &quot;background&quot;: { &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;scripts&quot;: [ &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;js/background.js&quot; &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; ], &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;persistent&quot;: true &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; } &lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt; that it is now recommended to use non-persistent background scripts with &lt;a href=&quot;https://developer.chrome.com/extensions/background_migration&quot;&gt;Event Driven Background Scripts&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Below is an example of what my background script looked like.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// List to track all active YouTube tabs&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Create Main Event Listener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If sender is youtube, add listener&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;youtube&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Handles event message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;START_COUNTDOWN&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startCountdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Subscribes tab to active youtube tabs and adds listener to url changes&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// When a youtube tab is closed, remove tabId from active_youtube_tabs list&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onRemoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeYoutubeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// When the tab url changes, remove tabId from active_youtube_tabs if user is no longer on Youtube&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onUpdated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;youtube.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeYoutubeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Removes specific tab from active_youtube_tabs list&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeYoutubeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;active_youtube_tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;When the script starts, a callback function is added with &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;onMessage.addListener()&lt;/code&gt; to handle events. Depending on the event received, a different action will be triggered. For example, the &lt;span class=&quot;accent&quot;&gt;START_COUNTDOWN&lt;/span&gt; event will start the countdown in the background script. The tabId is stored in a list to keep track of active youtube tabs if the sender is youtube. This is done using the Chrome Tabs API and we need to give permissions to our application in the manifest file.&lt;/p&gt; &lt;p&gt;I needed to use JQuery in the background script so I downloaded the &lt;em&gt;jquery-3.4.1.min.js&lt;/em&gt; file, saved it in the &lt;strong&gt;js&lt;/strong&gt; directory and specified the file as a background script. Here are the new changes to the manifest file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-JSON &quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &lt;span class=&quot;hl-line&quot;&gt; &quot;permissions&quot;: [ &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;tabs&quot; &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; ], &lt;/span&gt; &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &lt;span class=&quot;hl-line&quot;&gt; &quot;js/jquery-3.4.1.min.js&quot; &lt;/span&gt; ], &quot;persistent&quot;: true } }&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;content-scripts&quot;&gt;Content Scripts&lt;/h2&gt; &lt;p&gt;Content Scripts are run on specific web pages and can interact with a website’s DOM. To define a content script, I added a &lt;strong&gt;content_scripts&lt;/strong&gt; section to the &lt;strong&gt;manifest&lt;/strong&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot; language-JSON &quot;&gt;{ &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true }, &lt;span class=&quot;hl-line&quot;&gt; &quot;content_scripts&quot;: [ &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;matches&quot;: [ &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;&lt;em&gt;://&lt;/em&gt;.youtube.com/*&quot; &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; ], &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;js&quot;: [ &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;js/jquery-3.4.1.min.js&quot;, &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;js/content.js&quot; &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; ], &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; &quot;run_at&quot;: &quot;document_end&quot; &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; } &lt;/span&gt;&lt;span class=&quot;hl-line&quot;&gt; ] &lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;&quot;matches&quot;: [ &quot;*://*.youtube.com/*&quot; ]&lt;/code&gt; section tells Chrome to run the content scripts when the URL of the website matches the values specified. The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;&quot;run_at&quot;: &quot;document_end&quot;&lt;/code&gt; section ensures that the content scripts are run after the page is loaded.&lt;/p&gt; &lt;!-- ## Popup ## Web Resources ## Constants --&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Chrome Extensions have changed since I first created this project but it was still a valuable experience.&lt;/p&gt;</content><author><name>Yu-Yueh Liu</name></author><category term="JavaScript"/><category term="HTML5"/><category term="CSS3"/><category term="Chrome Extension"/><summary type="html">Chrome extensions are programs that add functionalities to Chrome and enhance your browsing experience. In fact, you can find a myriad of extensions for the purpose of improving your productivity, protecting your privacy, and more. Making your own Chrome extension is quite simple and it could turn out to be a fun personal project. Goal This article is a documentation of what I learned when making my first Chrome extension YouTubeStopwatch. If you’re looking for a tutorial for starters, check out the official [Getting Started Tutorial][getting-started]. [getting-started]: https://developer.chrome.com/extensions/getstarted What is YouTubeStopwatch? [YouTubeStopwatch][youtubestopwatch] was created for a course on Human-Computer Interaction (HCI). The objective was to help users manage the amount of time they would like to spend on YouTube, and somehow incite them to quit YouTube without resorting to blocking the site. [youtubestopwatch]: https://chrome.google.com/webstore/detail/youtubestopwatch/ibaejmohdpnppkglomilmholhndaobag The idea was to prompt the user for the desired time they want to spend on YouTube and start a countdown. Once the time is up, the user is asked whether they want to stay on YouTube or leave. If they choose to keep watching videos, they will be subject to some gradual graphical deterioration and slowly worsening their viewing experience. So how did I get started? Well, the first thing I had to learn was how Chrome Extensions are structured. Project Structure src ├── manifest.json ├── popup.html ├── js │ ├── background.js │ ├── content.js │ ├── jquery-3.4.1.min.js.js │ ├── constants.js │ └── … ├── img │ └── extension-icon.png └── css └── popup.css Manifest The manifest.json file is the first thing you need when creating an extension. It provides all the information about your extension to Google Chrome such as the name of your extension, the permissions needed, etc but we’ll get into that a bit later. Here is a minimal example: { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot; } Background Scripts Background scripts are scripts that run in the background of your browser when you open Google Chrome. You can make the scripts persistent or not depending on your use case. I chose to use a persistent script. As long as Google Chrome is open, the script will be running. To define background scripts, I added a background section to the manifest file. { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; ], &quot;persistent&quot;: true } } Note that it is now recommended to use non-persistent background scripts with Event Driven Background Scripts. Below is an example of what my background script looked like. // List to track all active YouTube tabs var active_youtube_tabs = []; // Create Main Event Listener function initBackground() { chrome.runtime.onMessage.addListener(function (msg, sender) { var tabId = sender.tab ? sender.tab.id : null; // If sender is youtube, add listener if (msg.from === 'youtube' &amp;amp;&amp;amp; typeof (msg.event) === 'undefined') { active_youtube_tabs.indexOf(tabId) &amp;lt; 0 ? addListeners(tabId) : null; } // Handles event message switch (msg.event) { case &quot;START_COUNTDOWN&quot;: startCountdown(); break; ... default: break; } }); } initBackground(); // Subscribes tab to active youtube tabs and adds listener to url changes function addListeners(tabId) { active_youtube_tabs.push(tabId); // When a youtube tab is closed, remove tabId from active_youtube_tabs list chrome.tabs.onRemoved.addListener(function (id) { if (tabId === id) { removeYoutubeTab(tabId); } }); // When the tab url changes, remove tabId from active_youtube_tabs if user is no longer on Youtube chrome.tabs.onUpdated.addListener(function (id, changeInfo) { if (tabId === id &amp;amp;&amp;amp; changeInfo.status === 'complete') { chrome.tabs.get(tabId, function (tab) { if (tab.url.indexOf('youtube.com') &amp;lt; 0) { removeYoutubeTab(tabId); } }); } }); } // Removes specific tab from active_youtube_tabs list function removeYoutubeTab(tabId) { var idx = active_youtube_tabs.indexOf(tabId); active_youtube_tabs.splice(idx, 1); } When the script starts, a callback function is added with onMessage.addListener() to handle events. Depending on the event received, a different action will be triggered. For example, the START_COUNTDOWN event will start the countdown in the background script. The tabId is stored in a list to keep track of active youtube tabs if the sender is youtube. This is done using the Chrome Tabs API and we need to give permissions to our application in the manifest file. I needed to use JQuery in the background script so I downloaded the jquery-3.4.1.min.js file, saved it in the js directory and specified the file as a background script. Here are the new changes to the manifest file: { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true } } Content Scripts Content Scripts are run on specific web pages and can interact with a website’s DOM. To define a content script, I added a content_scripts section to the manifest file. { &quot;manifest_version&quot;: 2, &quot;version&quot;: &quot;0.1&quot;, &quot;name&quot;: &quot;My Extension&quot;, &quot;description&quot;: &quot;This is my extension&quot;, &quot;permissions&quot;: [ &quot;tabs&quot; ], &quot;background&quot;: { &quot;scripts&quot;: [ &quot;js/background.js&quot; &quot;js/jquery-3.4.1.min.js&quot; ], &quot;persistent&quot;: true }, &quot;content_scripts&quot;: [ { &quot;matches&quot;: [ &quot;://.youtube.com/*&quot; ], &quot;js&quot;: [ &quot;js/jquery-3.4.1.min.js&quot;, &quot;js/content.js&quot; ], &quot;run_at&quot;: &quot;document_end&quot; } ] } The &quot;matches&quot;: [ &quot;*://*.youtube.com/*&quot; ] section tells Chrome to run the content scripts when the URL of the website matches the values specified. The &quot;run_at&quot;: &quot;document_end&quot; section ensures that the content scripts are run after the page is loaded. Conclusion Chrome Extensions have changed since I first created this project but it was still a valuable experience.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://uace.github.io/jekyll/update/2020/07/13/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!"/><published>2020-07-13T04:09:33+00:00</published><updated>2020-07-13T04:09:33+00:00</updated><id>https://uace.github.io/jekyll/update/2020/07/13/welcome-to-jekyll</id><content type="html" xml:base="https://uace.github.io/jekyll/update/2020/07/13/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt; &lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt; &lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll"/><category term="update"/><category term="Jekyll"/><category term="HowTo"/><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry></feed>